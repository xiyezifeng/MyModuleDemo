package com.yekong.im.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_NOTIFY_ENTITY".
*/
public class SystemNotifyEntityDao extends AbstractDao<SystemNotifyEntity, Long> {

    public static final String TABLENAME = "SYSTEM_NOTIFY_ENTITY";

    /**
     * Properties of entity SystemNotifyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Des = new Property(1, String.class, "des", false, "DES");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property MessageId = new Property(3, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property Form = new Property(4, String.class, "form", false, "FORM");
        public final static Property To = new Property(5, String.class, "to", false, "TO");
        public final static Property State = new Property(6, String.class, "state", false, "STATE");
        public final static Property Inviter = new Property(7, String.class, "inviter", false, "INVITER");
        public final static Property MessageKey = new Property(8, String.class, "messageKey", false, "MESSAGE_KEY");
        public final static Property StartTime = new Property(9, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(10, String.class, "endTime", false, "END_TIME");
    }


    public SystemNotifyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SystemNotifyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_NOTIFY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DES\" TEXT," + // 1: des
                "\"CONTENT\" TEXT," + // 2: content
                "\"MESSAGE_ID\" TEXT," + // 3: messageId
                "\"FORM\" TEXT," + // 4: form
                "\"TO\" TEXT," + // 5: to
                "\"STATE\" TEXT," + // 6: state
                "\"INVITER\" TEXT," + // 7: inviter
                "\"MESSAGE_KEY\" TEXT," + // 8: messageKey
                "\"START_TIME\" TEXT," + // 9: startTime
                "\"END_TIME\" TEXT);"); // 10: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_NOTIFY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemNotifyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(2, des);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(4, messageId);
        }
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(5, form);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(6, to);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
 
        String inviter = entity.getInviter();
        if (inviter != null) {
            stmt.bindString(8, inviter);
        }
 
        String messageKey = entity.getMessageKey();
        if (messageKey != null) {
            stmt.bindString(9, messageKey);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(10, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(11, endTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemNotifyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(2, des);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(4, messageId);
        }
 
        String form = entity.getForm();
        if (form != null) {
            stmt.bindString(5, form);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(6, to);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(7, state);
        }
 
        String inviter = entity.getInviter();
        if (inviter != null) {
            stmt.bindString(8, inviter);
        }
 
        String messageKey = entity.getMessageKey();
        if (messageKey != null) {
            stmt.bindString(9, messageKey);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(10, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(11, endTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SystemNotifyEntity readEntity(Cursor cursor, int offset) {
        SystemNotifyEntity entity = new SystemNotifyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // des
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // form
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // to
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // state
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // inviter
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // messageKey
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // startTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // endTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemNotifyEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDes(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setForm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setState(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInviter(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMessageKey(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStartTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEndTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemNotifyEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemNotifyEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemNotifyEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
